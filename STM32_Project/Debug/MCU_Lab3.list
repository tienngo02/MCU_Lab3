
MCU_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002560  08002560  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002560  08002560  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000060  080025c8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080025c8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091f7  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  00029280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acd  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1c8  00000000  00000000  00042b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822bf  00000000  00000000  0004dd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d001c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a4  00000000  00000000  000d0070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002524 	.word	0x08002524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002524 	.word	0x08002524

0800014c <isButton1Pressed>:
int KeyReg3[MAX_BUTTON] = {NORMAL_STATE};

int TimeOutForKeyPress[MAX_BUTTON] = {200};
int button_flag[MAX_BUTTON] = {0};

int isButton1Pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButton1Pressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButton1Pressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButton1Pressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButton1Pressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
//	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e076      	b.n	800029a <getKeyInput+0xfa>
	  KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  //Add your button here
	  KeyReg2[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4839      	ldr	r0, [pc, #228]	; (80002b8 <getKeyInput+0x118>)
 80001d2:	f001 f96f 	bl	80014b4 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <getKeyInput+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
	  KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4835      	ldr	r0, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e4:	f001 f966 	bl	80014b4 <HAL_GPIO_ReadPin>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <getKeyInput+0x114>)
 80001ee:	605a      	str	r2, [r3, #4]
	  KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f4:	4830      	ldr	r0, [pc, #192]	; (80002b8 <getKeyInput+0x118>)
 80001f6:	f001 f95d 	bl	80014b4 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <getKeyInput+0x114>)
 8000200:	609a      	str	r2, [r3, #8]
	  if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000202:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4928      	ldr	r1, [pc, #160]	; (80002ac <getKeyInput+0x10c>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d13e      	bne.n	8000294 <getKeyInput+0xf4>
 8000216:	4a25      	ldr	r2, [pc, #148]	; (80002ac <getKeyInput+0x10c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	4925      	ldr	r1, [pc, #148]	; (80002b4 <getKeyInput+0x114>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d134      	bne.n	8000294 <getKeyInput+0xf4>
		if (KeyReg3[i] != KeyReg2[i]){
 800022a:	4a24      	ldr	r2, [pc, #144]	; (80002bc <getKeyInput+0x11c>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4920      	ldr	r1, [pc, #128]	; (80002b4 <getKeyInput+0x114>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d016      	beq.n	800026c <getKeyInput+0xcc>
		  KeyReg3[i] = KeyReg2[i];
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	491d      	ldr	r1, [pc, #116]	; (80002bc <getKeyInput+0x11c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if (KeyReg2[i] == PRESSED_STATE){
 800024e:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <getKeyInput+0x114>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d11c      	bne.n	8000294 <getKeyInput+0xf4>
			TimeOutForKeyPress[i] = 200;
 800025a:	4a19      	ldr	r2, [pc, #100]	; (80002c0 <getKeyInput+0x120>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	21c8      	movs	r1, #200	; 0xc8
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f7ff ff8b 	bl	8000180 <subKeyProcess>
 800026a:	e013      	b.n	8000294 <getKeyInput+0xf4>
		  }
		}else{
		   TimeOutForKeyPress[i]--;
 800026c:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <getKeyInput+0x120>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <getKeyInput+0x120>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800027e:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <getKeyInput+0x120>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d104      	bne.n	8000294 <getKeyInput+0xf4>
				KeyReg3[i] = NORMAL_STATE;
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<MAX_BUTTON; i++){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd85      	ble.n	80001ac <getKeyInput+0xc>
			}
		}
	  }
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	40011000 	.word	0x40011000
 80002bc:	20000024 	.word	0x20000024
 80002c0:	20000030 	.word	0x20000030

080002c4 <fsm_automatic_run>:
int sec1 = 0;
int sec2 = 0;
int index_led = 0;


void fsm_automatic_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch(status){
 80002c8:	4ba9      	ldr	r3, [pc, #676]	; (8000570 <fsm_automatic_run+0x2ac>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	f200 80ff 	bhi.w	80004d2 <fsm_automatic_run+0x20e>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic_run+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002f1 	.word	0x080002f1
 80002e0:	08000357 	.word	0x08000357
 80002e4:	080003c7 	.word	0x080003c7
 80002e8:	08000423 	.word	0x08000423
 80002ec:	08000477 	.word	0x08000477
	case INIT:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2102      	movs	r1, #2
 80002f4:	489f      	ldr	r0, [pc, #636]	; (8000574 <fsm_automatic_run+0x2b0>)
 80002f6:	f001 f8f4 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2101      	movs	r1, #1
 80002fe:	489d      	ldr	r0, [pc, #628]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000300:	f001 f8ef 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2104      	movs	r1, #4
 8000308:	489a      	ldr	r0, [pc, #616]	; (8000574 <fsm_automatic_run+0x2b0>)
 800030a:	f001 f8ea 	bl	80014e2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2110      	movs	r1, #16
 8000312:	4898      	ldr	r0, [pc, #608]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000314:	f001 f8e5 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4895      	ldr	r0, [pc, #596]	; (8000574 <fsm_automatic_run+0x2b0>)
 800031e:	f001 f8e0 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2120      	movs	r1, #32
 8000326:	4893      	ldr	r0, [pc, #588]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000328:	f001 f8db 	bl	80014e2 <HAL_GPIO_WritePin>

		status = RED1_GREEN2;
 800032c:	4b90      	ldr	r3, [pc, #576]	; (8000570 <fsm_automatic_run+0x2ac>)
 800032e:	2202      	movs	r2, #2
 8000330:	601a      	str	r2, [r3, #0]
		setTimer(1000, 0);
 8000332:	2100      	movs	r1, #0
 8000334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000338:	f000 fcc8 	bl	8000ccc <setTimer>
		setTimer(250, 1);
 800033c:	2101      	movs	r1, #1
 800033e:	20fa      	movs	r0, #250	; 0xfa
 8000340:	f000 fcc4 	bl	8000ccc <setTimer>
		sec1 = red;
 8000344:	4b8c      	ldr	r3, [pc, #560]	; (8000578 <fsm_automatic_run+0x2b4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a8c      	ldr	r2, [pc, #560]	; (800057c <fsm_automatic_run+0x2b8>)
 800034a:	6013      	str	r3, [r2, #0]
		sec2 = green;
 800034c:	4b8c      	ldr	r3, [pc, #560]	; (8000580 <fsm_automatic_run+0x2bc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a8c      	ldr	r2, [pc, #560]	; (8000584 <fsm_automatic_run+0x2c0>)
 8000352:	6013      	str	r3, [r2, #0]
		break;
 8000354:	e0c6      	b.n	80004e4 <fsm_automatic_run+0x220>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2102      	movs	r1, #2
 800035a:	4886      	ldr	r0, [pc, #536]	; (8000574 <fsm_automatic_run+0x2b0>)
 800035c:	f001 f8c1 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	4883      	ldr	r0, [pc, #524]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000366:	f001 f8bc 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2104      	movs	r1, #4
 800036e:	4881      	ldr	r0, [pc, #516]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000370:	f001 f8b7 	bl	80014e2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2110      	movs	r1, #16
 8000378:	487e      	ldr	r0, [pc, #504]	; (8000574 <fsm_automatic_run+0x2b0>)
 800037a:	f001 f8b2 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2108      	movs	r1, #8
 8000382:	487c      	ldr	r0, [pc, #496]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000384:	f001 f8ad 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2120      	movs	r1, #32
 800038c:	4879      	ldr	r0, [pc, #484]	; (8000574 <fsm_automatic_run+0x2b0>)
 800038e:	f001 f8a8 	bl	80014e2 <HAL_GPIO_WritePin>

		if(sec2 <= 0){
 8000392:	4b7c      	ldr	r3, [pc, #496]	; (8000584 <fsm_automatic_run+0x2c0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	dc06      	bgt.n	80003a8 <fsm_automatic_run+0xe4>
			status = RED1_YELLOW2;
 800039a:	4b75      	ldr	r3, [pc, #468]	; (8000570 <fsm_automatic_run+0x2ac>)
 800039c:	2203      	movs	r2, #3
 800039e:	601a      	str	r2, [r3, #0]
			sec2 = yellow;
 80003a0:	4b79      	ldr	r3, [pc, #484]	; (8000588 <fsm_automatic_run+0x2c4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a77      	ldr	r2, [pc, #476]	; (8000584 <fsm_automatic_run+0x2c0>)
 80003a6:	6013      	str	r3, [r2, #0]
		}
		if(isButton1Pressed(0) == 1){
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff fecf 	bl	800014c <isButton1Pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	f040 8090 	bne.w	80004d6 <fsm_automatic_run+0x212>
			status = MAN_RED;
 80003b6:	4b6e      	ldr	r3, [pc, #440]	; (8000570 <fsm_automatic_run+0x2ac>)
 80003b8:	220c      	movs	r2, #12
 80003ba:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 80003bc:	2102      	movs	r1, #2
 80003be:	20fa      	movs	r0, #250	; 0xfa
 80003c0:	f000 fc84 	bl	8000ccc <setTimer>
		}
		break;
 80003c4:	e087      	b.n	80004d6 <fsm_automatic_run+0x212>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	486a      	ldr	r0, [pc, #424]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003cc:	f001 f889 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	4867      	ldr	r0, [pc, #412]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003d6:	f001 f884 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2104      	movs	r1, #4
 80003de:	4865      	ldr	r0, [pc, #404]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003e0:	f001 f87f 	bl	80014e2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2110      	movs	r1, #16
 80003e8:	4862      	ldr	r0, [pc, #392]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003ea:	f001 f87a 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2108      	movs	r1, #8
 80003f2:	4860      	ldr	r0, [pc, #384]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003f4:	f001 f875 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	485d      	ldr	r0, [pc, #372]	; (8000574 <fsm_automatic_run+0x2b0>)
 80003fe:	f001 f870 	bl	80014e2 <HAL_GPIO_WritePin>

		if(sec2 <= 0){
 8000402:	4b60      	ldr	r3, [pc, #384]	; (8000584 <fsm_automatic_run+0x2c0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	dc67      	bgt.n	80004da <fsm_automatic_run+0x216>
			status = GREEN1_RED2;
 800040a:	4b59      	ldr	r3, [pc, #356]	; (8000570 <fsm_automatic_run+0x2ac>)
 800040c:	2204      	movs	r2, #4
 800040e:	601a      	str	r2, [r3, #0]
			sec1 = green;
 8000410:	4b5b      	ldr	r3, [pc, #364]	; (8000580 <fsm_automatic_run+0x2bc>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a59      	ldr	r2, [pc, #356]	; (800057c <fsm_automatic_run+0x2b8>)
 8000416:	6013      	str	r3, [r2, #0]
			sec2 = red;
 8000418:	4b57      	ldr	r3, [pc, #348]	; (8000578 <fsm_automatic_run+0x2b4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a59      	ldr	r2, [pc, #356]	; (8000584 <fsm_automatic_run+0x2c0>)
 800041e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000420:	e05b      	b.n	80004da <fsm_automatic_run+0x216>
	case GREEN1_RED2:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2102      	movs	r1, #2
 8000426:	4853      	ldr	r0, [pc, #332]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000428:	f001 f85b 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2101      	movs	r1, #1
 8000430:	4850      	ldr	r0, [pc, #320]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000432:	f001 f856 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2104      	movs	r1, #4
 800043a:	484e      	ldr	r0, [pc, #312]	; (8000574 <fsm_automatic_run+0x2b0>)
 800043c:	f001 f851 	bl	80014e2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	484b      	ldr	r0, [pc, #300]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000446:	f001 f84c 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2108      	movs	r1, #8
 800044e:	4849      	ldr	r0, [pc, #292]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000450:	f001 f847 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2120      	movs	r1, #32
 8000458:	4846      	ldr	r0, [pc, #280]	; (8000574 <fsm_automatic_run+0x2b0>)
 800045a:	f001 f842 	bl	80014e2 <HAL_GPIO_WritePin>

		if(sec1 <= 0){
 800045e:	4b47      	ldr	r3, [pc, #284]	; (800057c <fsm_automatic_run+0x2b8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	dc3b      	bgt.n	80004de <fsm_automatic_run+0x21a>
			status = YELLOW1_RED2;
 8000466:	4b42      	ldr	r3, [pc, #264]	; (8000570 <fsm_automatic_run+0x2ac>)
 8000468:	2205      	movs	r2, #5
 800046a:	601a      	str	r2, [r3, #0]
			sec1 = yellow;
 800046c:	4b46      	ldr	r3, [pc, #280]	; (8000588 <fsm_automatic_run+0x2c4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a42      	ldr	r2, [pc, #264]	; (800057c <fsm_automatic_run+0x2b8>)
 8000472:	6013      	str	r3, [r2, #0]
		}
		break;
 8000474:	e033      	b.n	80004de <fsm_automatic_run+0x21a>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2102      	movs	r1, #2
 800047a:	483e      	ldr	r0, [pc, #248]	; (8000574 <fsm_automatic_run+0x2b0>)
 800047c:	f001 f831 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2101      	movs	r1, #1
 8000484:	483b      	ldr	r0, [pc, #236]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000486:	f001 f82c 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2104      	movs	r1, #4
 800048e:	4839      	ldr	r0, [pc, #228]	; (8000574 <fsm_automatic_run+0x2b0>)
 8000490:	f001 f827 	bl	80014e2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	4836      	ldr	r0, [pc, #216]	; (8000574 <fsm_automatic_run+0x2b0>)
 800049a:	f001 f822 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2108      	movs	r1, #8
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <fsm_automatic_run+0x2b0>)
 80004a4:	f001 f81d 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2120      	movs	r1, #32
 80004ac:	4831      	ldr	r0, [pc, #196]	; (8000574 <fsm_automatic_run+0x2b0>)
 80004ae:	f001 f818 	bl	80014e2 <HAL_GPIO_WritePin>

		if(sec1 <= 0){
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <fsm_automatic_run+0x2b8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dc13      	bgt.n	80004e2 <fsm_automatic_run+0x21e>
			status = RED1_GREEN2;
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <fsm_automatic_run+0x2ac>)
 80004bc:	2202      	movs	r2, #2
 80004be:	601a      	str	r2, [r3, #0]
			sec1 = red;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <fsm_automatic_run+0x2b4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a2d      	ldr	r2, [pc, #180]	; (800057c <fsm_automatic_run+0x2b8>)
 80004c6:	6013      	str	r3, [r2, #0]
			sec2 = green;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <fsm_automatic_run+0x2bc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <fsm_automatic_run+0x2c0>)
 80004ce:	6013      	str	r3, [r2, #0]
		}
		break;
 80004d0:	e007      	b.n	80004e2 <fsm_automatic_run+0x21e>
	default:
		break;
 80004d2:	bf00      	nop
 80004d4:	e006      	b.n	80004e4 <fsm_automatic_run+0x220>
		break;
 80004d6:	bf00      	nop
 80004d8:	e004      	b.n	80004e4 <fsm_automatic_run+0x220>
		break;
 80004da:	bf00      	nop
 80004dc:	e002      	b.n	80004e4 <fsm_automatic_run+0x220>
		break;
 80004de:	bf00      	nop
 80004e0:	e000      	b.n	80004e4 <fsm_automatic_run+0x220>
		break;
 80004e2:	bf00      	nop
	}

	if((status >= INIT) && (status <=YELLOW1_RED2)){
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <fsm_automatic_run+0x2ac>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	dd26      	ble.n	800053a <fsm_automatic_run+0x276>
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <fsm_automatic_run+0x2ac>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	dc22      	bgt.n	800053a <fsm_automatic_run+0x276>
		updateClockBuffer(sec1, sec2);
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <fsm_automatic_run+0x2b8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a22      	ldr	r2, [pc, #136]	; (8000584 <fsm_automatic_run+0x2c0>)
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fa84 	bl	8000a0c <updateClockBuffer>
		if(timer_flag[0] == 1){
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <fsm_automatic_run+0x2c8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d116      	bne.n	800053a <fsm_automatic_run+0x276>
			setTimer(1000, 0);
 800050c:	2100      	movs	r1, #0
 800050e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000512:	f000 fbdb 	bl	8000ccc <setTimer>
			if(sec1 > 0) sec1--;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <fsm_automatic_run+0x2b8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	dd04      	ble.n	8000528 <fsm_automatic_run+0x264>
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <fsm_automatic_run+0x2b8>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <fsm_automatic_run+0x2b8>)
 8000526:	6013      	str	r3, [r2, #0]
			if(sec2 > 0) sec2--;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <fsm_automatic_run+0x2c0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd04      	ble.n	800053a <fsm_automatic_run+0x276>
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <fsm_automatic_run+0x2c0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <fsm_automatic_run+0x2c0>)
 8000538:	6013      	str	r3, [r2, #0]
		}
	}

	if(timer_flag[1] == 1){
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <fsm_automatic_run+0x2c8>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d114      	bne.n	800056c <fsm_automatic_run+0x2a8>
		setTimer(250, 1);
 8000542:	2101      	movs	r1, #1
 8000544:	20fa      	movs	r0, #250	; 0xfa
 8000546:	f000 fbc1 	bl	8000ccc <setTimer>
		update7SEG(index_led);
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <fsm_automatic_run+0x2cc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f9d0 	bl	80008f4 <update7SEG>
		index_led++;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <fsm_automatic_run+0x2cc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <fsm_automatic_run+0x2cc>)
 800055c:	6013      	str	r3, [r2, #0]
		if(index_led >= MAX_LED) index_led = 0;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <fsm_automatic_run+0x2cc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b03      	cmp	r3, #3
 8000564:	dd02      	ble.n	800056c <fsm_automatic_run+0x2a8>
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <fsm_automatic_run+0x2cc>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
	}
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000094 	.word	0x20000094
 8000574:	40010800 	.word	0x40010800
 8000578:	20000048 	.word	0x20000048
 800057c:	20000088 	.word	0x20000088
 8000580:	2000004c 	.word	0x2000004c
 8000584:	2000008c 	.word	0x2000008c
 8000588:	20000050 	.word	0x20000050
 800058c:	200000d0 	.word	0x200000d0
 8000590:	20000090 	.word	0x20000090

08000594 <ledBalance>:

int redMod = 1;
int yellowMod = 1;
int greenMod = 1;

void ledBalance(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(red == (green + yellow)) return;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <ledBalance+0x50>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <ledBalance+0x54>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	441a      	add	r2, r3
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <ledBalance+0x58>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d018      	beq.n	80005dc <ledBalance+0x48>
	else if(red < (green + yellow)){
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <ledBalance+0x50>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ledBalance+0x54>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	441a      	add	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <ledBalance+0x58>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dd07      	ble.n	80005cc <ledBalance+0x38>
		red = green + yellow;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <ledBalance+0x50>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <ledBalance+0x54>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <ledBalance+0x58>)
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	e008      	b.n	80005de <ledBalance+0x4a>
	}
	else{
		green = red - yellow;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <ledBalance+0x58>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <ledBalance+0x54>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <ledBalance+0x50>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	e000      	b.n	80005de <ledBalance+0x4a>
	if(red == (green + yellow)) return;
 80005dc:	bf00      	nop
	}
}
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	2000004c 	.word	0x2000004c
 80005e8:	20000050 	.word	0x20000050
 80005ec:	20000048 	.word	0x20000048

080005f0 <fsm_manual_run>:

void fsm_manual_run(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	switch(status){
 80005f4:	4b6a      	ldr	r3, [pc, #424]	; (80007a0 <fsm_manual_run+0x1b0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b0e      	cmp	r3, #14
 80005fa:	d049      	beq.n	8000690 <fsm_manual_run+0xa0>
 80005fc:	2b0e      	cmp	r3, #14
 80005fe:	f300 80c5 	bgt.w	800078c <fsm_manual_run+0x19c>
 8000602:	2b0c      	cmp	r3, #12
 8000604:	d003      	beq.n	800060e <fsm_manual_run+0x1e>
 8000606:	2b0d      	cmp	r3, #13
 8000608:	f000 8082 	beq.w	8000710 <fsm_manual_run+0x120>
		if(isButton1Pressed(2) == 1){
			green = greenMod;
		}
		break;
	default:
		break;
 800060c:	e0be      	b.n	800078c <fsm_manual_run+0x19c>
		updateClockBuffer(2, redMod);
 800060e:	4b65      	ldr	r3, [pc, #404]	; (80007a4 <fsm_manual_run+0x1b4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	2002      	movs	r0, #2
 8000616:	f000 f9f9 	bl	8000a0c <updateClockBuffer>
		if(timer_flag[2] == 1){
 800061a:	4b63      	ldr	r3, [pc, #396]	; (80007a8 <fsm_manual_run+0x1b8>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10b      	bne.n	800063a <fsm_manual_run+0x4a>
			setTimer(250, 2);
 8000622:	2102      	movs	r1, #2
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fb51 	bl	8000ccc <setTimer>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800062a:	2101      	movs	r1, #1
 800062c:	485f      	ldr	r0, [pc, #380]	; (80007ac <fsm_manual_run+0x1bc>)
 800062e:	f000 ff70 	bl	8001512 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000632:	2108      	movs	r1, #8
 8000634:	485d      	ldr	r0, [pc, #372]	; (80007ac <fsm_manual_run+0x1bc>)
 8000636:	f000 ff6c 	bl	8001512 <HAL_GPIO_TogglePin>
		if(isButton1Pressed(0) == 1){
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fd86 	bl	800014c <isButton1Pressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <fsm_manual_run+0x64>
			status = MAN_YELLOW;
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <fsm_manual_run+0x1b0>)
 8000648:	220e      	movs	r2, #14
 800064a:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 800064c:	2102      	movs	r1, #2
 800064e:	20fa      	movs	r0, #250	; 0xfa
 8000650:	f000 fb3c 	bl	8000ccc <setTimer>
		if(isButton1Pressed(1) == 1){
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fd79 	bl	800014c <isButton1Pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10b      	bne.n	8000678 <fsm_manual_run+0x88>
			redMod++;
 8000660:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <fsm_manual_run+0x1b4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a4f      	ldr	r2, [pc, #316]	; (80007a4 <fsm_manual_run+0x1b4>)
 8000668:	6013      	str	r3, [r2, #0]
			if(redMod > 99) redMod = 1;
 800066a:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <fsm_manual_run+0x1b4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b63      	cmp	r3, #99	; 0x63
 8000670:	dd02      	ble.n	8000678 <fsm_manual_run+0x88>
 8000672:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <fsm_manual_run+0x1b4>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(2) == 1){
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff fd67 	bl	800014c <isButton1Pressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	f040 8085 	bne.w	8000790 <fsm_manual_run+0x1a0>
			red = redMod;
 8000686:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <fsm_manual_run+0x1b4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <fsm_manual_run+0x1c0>)
 800068c:	6013      	str	r3, [r2, #0]
		break;
 800068e:	e07f      	b.n	8000790 <fsm_manual_run+0x1a0>
		updateClockBuffer(3, yellowMod);
 8000690:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <fsm_manual_run+0x1c4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f9b8 	bl	8000a0c <updateClockBuffer>
		if(timer_flag[2] == 1){
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <fsm_manual_run+0x1b8>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d10b      	bne.n	80006bc <fsm_manual_run+0xcc>
			setTimer(250, 2);
 80006a4:	2102      	movs	r1, #2
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fb10 	bl	8000ccc <setTimer>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 80006ac:	2104      	movs	r1, #4
 80006ae:	483f      	ldr	r0, [pc, #252]	; (80007ac <fsm_manual_run+0x1bc>)
 80006b0:	f000 ff2f 	bl	8001512 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80006b4:	2120      	movs	r1, #32
 80006b6:	483d      	ldr	r0, [pc, #244]	; (80007ac <fsm_manual_run+0x1bc>)
 80006b8:	f000 ff2b 	bl	8001512 <HAL_GPIO_TogglePin>
		if(isButton1Pressed(0) == 1){
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fd45 	bl	800014c <isButton1Pressed>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d106      	bne.n	80006d6 <fsm_manual_run+0xe6>
			status = MAN_GREEN;
 80006c8:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <fsm_manual_run+0x1b0>)
 80006ca:	220d      	movs	r2, #13
 80006cc:	601a      	str	r2, [r3, #0]
			setTimer(250, 2);
 80006ce:	2102      	movs	r1, #2
 80006d0:	20fa      	movs	r0, #250	; 0xfa
 80006d2:	f000 fafb 	bl	8000ccc <setTimer>
		if(isButton1Pressed(1) == 1){
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff fd38 	bl	800014c <isButton1Pressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10b      	bne.n	80006fa <fsm_manual_run+0x10a>
			yellowMod++;
 80006e2:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <fsm_manual_run+0x1c4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a32      	ldr	r2, [pc, #200]	; (80007b4 <fsm_manual_run+0x1c4>)
 80006ea:	6013      	str	r3, [r2, #0]
			if(yellowMod > 99) yellowMod = 1;
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <fsm_manual_run+0x1c4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b63      	cmp	r3, #99	; 0x63
 80006f2:	dd02      	ble.n	80006fa <fsm_manual_run+0x10a>
 80006f4:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <fsm_manual_run+0x1c4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(2) == 1){
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff fd26 	bl	800014c <isButton1Pressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d146      	bne.n	8000794 <fsm_manual_run+0x1a4>
			yellow = yellowMod;
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <fsm_manual_run+0x1c4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <fsm_manual_run+0x1c8>)
 800070c:	6013      	str	r3, [r2, #0]
		break;
 800070e:	e041      	b.n	8000794 <fsm_manual_run+0x1a4>
		updateClockBuffer(4, greenMod);
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <fsm_manual_run+0x1cc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	2004      	movs	r0, #4
 8000718:	f000 f978 	bl	8000a0c <updateClockBuffer>
		if(timer_flag[2] == 1){
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <fsm_manual_run+0x1b8>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10b      	bne.n	800073c <fsm_manual_run+0x14c>
			setTimer(250, 2);
 8000724:	2102      	movs	r1, #2
 8000726:	20fa      	movs	r0, #250	; 0xfa
 8000728:	f000 fad0 	bl	8000ccc <setTimer>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800072c:	2102      	movs	r1, #2
 800072e:	481f      	ldr	r0, [pc, #124]	; (80007ac <fsm_manual_run+0x1bc>)
 8000730:	f000 feef 	bl	8001512 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000734:	2110      	movs	r1, #16
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <fsm_manual_run+0x1bc>)
 8000738:	f000 feeb 	bl	8001512 <HAL_GPIO_TogglePin>
		if(isButton1Pressed(0) == 1){
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fd05 	bl	800014c <isButton1Pressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	d104      	bne.n	8000752 <fsm_manual_run+0x162>
			ledBalance();
 8000748:	f7ff ff24 	bl	8000594 <ledBalance>
			status = INIT;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <fsm_manual_run+0x1b0>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(1) == 1){
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fcfa 	bl	800014c <isButton1Pressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d10b      	bne.n	8000776 <fsm_manual_run+0x186>
			greenMod++;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <fsm_manual_run+0x1cc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a15      	ldr	r2, [pc, #84]	; (80007bc <fsm_manual_run+0x1cc>)
 8000766:	6013      	str	r3, [r2, #0]
			if(greenMod > 99) greenMod = 1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <fsm_manual_run+0x1cc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b63      	cmp	r3, #99	; 0x63
 800076e:	dd02      	ble.n	8000776 <fsm_manual_run+0x186>
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <fsm_manual_run+0x1cc>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(2) == 1){
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff fce8 	bl	800014c <isButton1Pressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10a      	bne.n	8000798 <fsm_manual_run+0x1a8>
			green = greenMod;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <fsm_manual_run+0x1cc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <fsm_manual_run+0x1d0>)
 8000788:	6013      	str	r3, [r2, #0]
		break;
 800078a:	e005      	b.n	8000798 <fsm_manual_run+0x1a8>
		break;
 800078c:	bf00      	nop
 800078e:	e004      	b.n	800079a <fsm_manual_run+0x1aa>
		break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <fsm_manual_run+0x1aa>
		break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <fsm_manual_run+0x1aa>
		break;
 8000798:	bf00      	nop
	}
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000094 	.word	0x20000094
 80007a4:	2000003c 	.word	0x2000003c
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	40010800 	.word	0x40010800
 80007b0:	20000048 	.word	0x20000048
 80007b4:	20000040 	.word	0x20000040
 80007b8:	20000050 	.word	0x20000050
 80007bc:	20000044 	.word	0x20000044
 80007c0:	2000004c 	.word	0x2000004c

080007c4 <display7SEG>:
int status = 0;
int red = 5;
int green = 3;
int yellow = 2;

void display7SEG(int num){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(num==1 || num==4) HAL_GPIO_WritePin (SEG7_A_GPIO_Port, SEG7_A_Pin, SET);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d002      	beq.n	80007d8 <display7SEG+0x14>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d105      	bne.n	80007e4 <display7SEG+0x20>
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4844      	ldr	r0, [pc, #272]	; (80008f0 <display7SEG+0x12c>)
 80007de:	f000 fe80 	bl	80014e2 <HAL_GPIO_WritePin>
 80007e2:	e004      	b.n	80007ee <display7SEG+0x2a>
	else HAL_GPIO_WritePin (SEG7_A_GPIO_Port, SEG7_A_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	4841      	ldr	r0, [pc, #260]	; (80008f0 <display7SEG+0x12c>)
 80007ea:	f000 fe7a 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==5 || num==6) HAL_GPIO_WritePin (SEG7_B_GPIO_Port, SEG7_B_Pin, SET);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d002      	beq.n	80007fa <display7SEG+0x36>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d105      	bne.n	8000806 <display7SEG+0x42>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2102      	movs	r1, #2
 80007fe:	483c      	ldr	r0, [pc, #240]	; (80008f0 <display7SEG+0x12c>)
 8000800:	f000 fe6f 	bl	80014e2 <HAL_GPIO_WritePin>
 8000804:	e004      	b.n	8000810 <display7SEG+0x4c>
	else HAL_GPIO_WritePin (SEG7_B_GPIO_Port, SEG7_B_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2102      	movs	r1, #2
 800080a:	4839      	ldr	r0, [pc, #228]	; (80008f0 <display7SEG+0x12c>)
 800080c:	f000 fe69 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==2) HAL_GPIO_WritePin (SEG7_C_GPIO_Port, SEG7_C_Pin, SET);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d105      	bne.n	8000822 <display7SEG+0x5e>
 8000816:	2201      	movs	r2, #1
 8000818:	2104      	movs	r1, #4
 800081a:	4835      	ldr	r0, [pc, #212]	; (80008f0 <display7SEG+0x12c>)
 800081c:	f000 fe61 	bl	80014e2 <HAL_GPIO_WritePin>
 8000820:	e004      	b.n	800082c <display7SEG+0x68>
	else HAL_GPIO_WritePin (SEG7_C_GPIO_Port, SEG7_C_Pin, RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2104      	movs	r1, #4
 8000826:	4832      	ldr	r0, [pc, #200]	; (80008f0 <display7SEG+0x12c>)
 8000828:	f000 fe5b 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==1 || num==4 || num==7) HAL_GPIO_WritePin (SEG7_D_GPIO_Port, SEG7_D_Pin, SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d005      	beq.n	800083e <display7SEG+0x7a>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d002      	beq.n	800083e <display7SEG+0x7a>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d105      	bne.n	800084a <display7SEG+0x86>
 800083e:	2201      	movs	r2, #1
 8000840:	2108      	movs	r1, #8
 8000842:	482b      	ldr	r0, [pc, #172]	; (80008f0 <display7SEG+0x12c>)
 8000844:	f000 fe4d 	bl	80014e2 <HAL_GPIO_WritePin>
 8000848:	e004      	b.n	8000854 <display7SEG+0x90>
	else HAL_GPIO_WritePin (SEG7_D_GPIO_Port, SEG7_D_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <display7SEG+0x12c>)
 8000850:	f000 fe47 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==1 || num==3 || num==4 || num==5 || num==7 || num==9) HAL_GPIO_WritePin (SEG7_E_GPIO_Port, SEG7_E_Pin, SET);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00e      	beq.n	8000878 <display7SEG+0xb4>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d00b      	beq.n	8000878 <display7SEG+0xb4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d008      	beq.n	8000878 <display7SEG+0xb4>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d005      	beq.n	8000878 <display7SEG+0xb4>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d002      	beq.n	8000878 <display7SEG+0xb4>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b09      	cmp	r3, #9
 8000876:	d105      	bne.n	8000884 <display7SEG+0xc0>
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <display7SEG+0x12c>)
 800087e:	f000 fe30 	bl	80014e2 <HAL_GPIO_WritePin>
 8000882:	e004      	b.n	800088e <display7SEG+0xca>
	else HAL_GPIO_WritePin (SEG7_E_GPIO_Port, SEG7_E_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	4819      	ldr	r0, [pc, #100]	; (80008f0 <display7SEG+0x12c>)
 800088a:	f000 fe2a 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==1 || num==2 || num==3 || num==7) HAL_GPIO_WritePin (SEG7_F_GPIO_Port, SEG7_F_Pin, SET);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d008      	beq.n	80008a6 <display7SEG+0xe2>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d005      	beq.n	80008a6 <display7SEG+0xe2>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d002      	beq.n	80008a6 <display7SEG+0xe2>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	d105      	bne.n	80008b2 <display7SEG+0xee>
 80008a6:	2201      	movs	r2, #1
 80008a8:	2120      	movs	r1, #32
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <display7SEG+0x12c>)
 80008ac:	f000 fe19 	bl	80014e2 <HAL_GPIO_WritePin>
 80008b0:	e004      	b.n	80008bc <display7SEG+0xf8>
	else HAL_GPIO_WritePin (SEG7_F_GPIO_Port, SEG7_F_Pin, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <display7SEG+0x12c>)
 80008b8:	f000 fe13 	bl	80014e2 <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==7) HAL_GPIO_WritePin (SEG7_G_GPIO_Port, SEG7_G_Pin, SET);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <display7SEG+0x10a>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d002      	beq.n	80008ce <display7SEG+0x10a>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d105      	bne.n	80008da <display7SEG+0x116>
 80008ce:	2201      	movs	r2, #1
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <display7SEG+0x12c>)
 80008d4:	f000 fe05 	bl	80014e2 <HAL_GPIO_WritePin>
 80008d8:	e005      	b.n	80008e6 <display7SEG+0x122>
	else HAL_GPIO_WritePin (SEG7_G_GPIO_Port, SEG7_G_Pin, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <display7SEG+0x12c>)
 80008e0:	f000 fdff 	bl	80014e2 <HAL_GPIO_WritePin>

}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <update7SEG>:

int led_buffer[4] = {0, 0, 0, 0};

void update7SEG(int index){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d87a      	bhi.n	80009f8 <update7SEG+0x104>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <update7SEG+0x14>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000951 	.word	0x08000951
 8000910:	08000989 	.word	0x08000989
 8000914:	080009c1 	.word	0x080009c1
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	4839      	ldr	r0, [pc, #228]	; (8000a04 <update7SEG+0x110>)
 800091e:	f000 fde0 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	4837      	ldr	r0, [pc, #220]	; (8000a04 <update7SEG+0x110>)
 8000928:	f000 fddb 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4834      	ldr	r0, [pc, #208]	; (8000a04 <update7SEG+0x110>)
 8000934:	f000 fdd5 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4831      	ldr	r0, [pc, #196]	; (8000a04 <update7SEG+0x110>)
 8000940:	f000 fdcf 	bl	80014e2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <update7SEG+0x114>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff3b 	bl	80007c4 <display7SEG>
		break;
 800094e:	e054      	b.n	80009fa <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	482b      	ldr	r0, [pc, #172]	; (8000a04 <update7SEG+0x110>)
 8000956:	f000 fdc4 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	4829      	ldr	r0, [pc, #164]	; (8000a04 <update7SEG+0x110>)
 8000960:	f000 fdbf 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096a:	4826      	ldr	r0, [pc, #152]	; (8000a04 <update7SEG+0x110>)
 800096c:	f000 fdb9 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <update7SEG+0x110>)
 8000978:	f000 fdb3 	bl	80014e2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <update7SEG+0x114>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff1f 	bl	80007c4 <display7SEG>
		break;
 8000986:	e038      	b.n	80009fa <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	481d      	ldr	r0, [pc, #116]	; (8000a04 <update7SEG+0x110>)
 800098e:	f000 fda8 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <update7SEG+0x110>)
 8000998:	f000 fda3 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <update7SEG+0x110>)
 80009a4:	f000 fd9d 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <update7SEG+0x110>)
 80009b0:	f000 fd97 	bl	80014e2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <update7SEG+0x114>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff03 	bl	80007c4 <display7SEG>
		break;
 80009be:	e01c      	b.n	80009fa <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <update7SEG+0x110>)
 80009c6:	f000 fd8c 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <update7SEG+0x110>)
 80009d0:	f000 fd87 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <update7SEG+0x110>)
 80009dc:	f000 fd81 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <update7SEG+0x110>)
 80009e8:	f000 fd7b 	bl	80014e2 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <update7SEG+0x114>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fee7 	bl	80007c4 <display7SEG>
		break;
 80009f6:	e000      	b.n	80009fa <update7SEG+0x106>
	default:
		break;
 80009f8:	bf00      	nop
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010800 	.word	0x40010800
 8000a08:	20000098 	.word	0x20000098

08000a0c <updateClockBuffer>:

void updateClockBuffer(int sec1, int sec2){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	led_buffer[0] = sec1/10;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <updateClockBuffer+0x70>)
 8000a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1e:	1092      	asrs	r2, r2, #2
 8000a20:	17db      	asrs	r3, r3, #31
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <updateClockBuffer+0x74>)
 8000a26:	6013      	str	r3, [r2, #0]
	led_buffer[1] = sec1%10;
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <updateClockBuffer+0x70>)
 8000a2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a30:	109a      	asrs	r2, r3, #2
 8000a32:	17cb      	asrs	r3, r1, #31
 8000a34:	1ad2      	subs	r2, r2, r3
 8000a36:	4613      	mov	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	1aca      	subs	r2, r1, r3
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <updateClockBuffer+0x74>)
 8000a42:	605a      	str	r2, [r3, #4]
	led_buffer[2] = sec2/10;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <updateClockBuffer+0x70>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	1092      	asrs	r2, r2, #2
 8000a4e:	17db      	asrs	r3, r3, #31
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <updateClockBuffer+0x74>)
 8000a54:	6093      	str	r3, [r2, #8]
	led_buffer[3] = sec2%10;
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <updateClockBuffer+0x70>)
 8000a5a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a5e:	109a      	asrs	r2, r3, #2
 8000a60:	17cb      	asrs	r3, r1, #31
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	1aca      	subs	r2, r1, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <updateClockBuffer+0x74>)
 8000a70:	60da      	str	r2, [r3, #12]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	66666667 	.word	0x66666667
 8000a80:	20000098 	.word	0x20000098

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fa2a 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f814 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 f89a 	bl	8000bc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a94:	f000 f84c 	bl	8000b30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <main+0x2c>)
 8000a9a:	f001 f97f 	bl	8001d9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <main+0x30>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
//	  }
//	  if(isButton1Pressed(2) == 1){
//		  HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
//	  }

	  fsm_automatic_run();
 8000aa4:	f7ff fc0e 	bl	80002c4 <fsm_automatic_run>
	  fsm_manual_run();
 8000aa8:	f7ff fda2 	bl	80005f0 <fsm_manual_run>
	  fsm_automatic_run();
 8000aac:	e7fa      	b.n	8000aa4 <main+0x20>
 8000aae:	bf00      	nop
 8000ab0:	200000f8 	.word	0x200000f8
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	; 0x40
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	2228      	movs	r2, #40	; 0x28
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fd24 	bl	8002514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd28 	bl	8001544 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000afa:	f000 f8e1 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afe:	230f      	movs	r3, #15
 8000b00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ff94 	bl	8001a44 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f8cd 	bl	8000cc0 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3740      	adds	r7, #64	; 0x40
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b64:	2209      	movs	r2, #9
 8000b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b76:	f001 f8c1 	bl	8001cfc <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b80:	f000 f89e 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b92:	f001 fa57 	bl	8002044 <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f000 f890 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000bae:	f001 fc23 	bl	80023f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f000 f882 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000f8 	.word	0x200000f8

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000c24:	2200      	movs	r2, #0
 8000c26:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c2a:	481c      	ldr	r0, [pc, #112]	; (8000c9c <MX_GPIO_Init+0xd4>)
 8000c2c:	f000 fc59 	bl	80014e2 <HAL_GPIO_WritePin>
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8000c30:	2200      	movs	r2, #0
 8000c32:	217f      	movs	r1, #127	; 0x7f
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_GPIO_Init+0xd8>)
 8000c36:	f000 fc54 	bl	80014e2 <HAL_GPIO_WritePin>
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000c3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <MX_GPIO_Init+0xdc>)
 8000c50:	f000 fab6 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_GREEN2_Pin LED_YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000c54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000c58:	613b      	str	r3, [r7, #16]
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MX_GPIO_Init+0xd4>)
 8000c6e:	f000 faa7 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_A_Pin SEG7_B_Pin SEG7_C_Pin SEG7_D_Pin
                           SEG7_E_Pin SEG7_F_Pin SEG7_G_Pin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_D_Pin
 8000c72:	237f      	movs	r3, #127	; 0x7f
 8000c74:	613b      	str	r3, [r7, #16]
                          |SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_GPIO_Init+0xd8>)
 8000c8a:	f000 fa99 	bl	80011c0 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40010c00 	.word	0x40010c00
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cb0:	f000 f832 	bl	8000d18 <timerRun>
	getKeyInput();
 8000cb4:	f7ff fa74 	bl	80001a0 <getKeyInput>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <setTimer>:
#define TICK 10

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int index){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
 	if(index >= 0 && index < 10){
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db12      	blt.n	8000d02 <setTimer+0x36>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	dc0f      	bgt.n	8000d02 <setTimer+0x36>
		timer_counter[index] = duration / TICK;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <setTimer+0x40>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	1092      	asrs	r2, r2, #2
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <setTimer+0x44>)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <setTimer+0x48>)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	66666667 	.word	0x66666667
 8000d10:	200000a8 	.word	0x200000a8
 8000d14:	200000d0 	.word	0x200000d0

08000d18 <timerRun>:

void timerRun(){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
	for(int i = 0; i <= 5; i++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	e01c      	b.n	8000d5e <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <timerRun+0x58>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd13      	ble.n	8000d58 <timerRun+0x40>
			timer_counter[i]--;
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <timerRun+0x58>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <timerRun+0x58>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <timerRun+0x58>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dc04      	bgt.n	8000d58 <timerRun+0x40>
				timer_flag[i] = 1;
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <timerRun+0x5c>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2101      	movs	r1, #1
 8000d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i <= 5; i++){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	dddf      	ble.n	8000d24 <timerRun+0xc>
			}
		}
	}
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200000a8 	.word	0x200000a8
 8000d74:	200000d0 	.word	0x200000d0

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d113      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201c      	movs	r0, #28
 8000e0c:	f000 f9a1 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e10:	201c      	movs	r0, #28
 8000e12:	f000 f9ba 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f87f 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f000 ffdb 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000f8 	.word	0x200000f8

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff fff8 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e9a:	490c      	ldr	r1, [pc, #48]	; (8000ecc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb0:	4c09      	ldr	r4, [pc, #36]	; (8000ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f001 fb05 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff fddf 	bl	8000a84 <main>
  bx lr
 8000ec6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ed0:	08002568 	.word	0x08002568
  ldr r2, =_sbss
 8000ed4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ed8:	20000144 	.word	0x20000144

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f923 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff ff3c 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f93b 	bl	80011a6 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f903 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000054 	.word	0x20000054
 8000f64:	2000005c 	.word	0x2000005c
 8000f68:	20000058 	.word	0x20000058

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	2000005c 	.word	0x2000005c
 8000f8c:	20000140 	.word	0x20000140

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000140 	.word	0x20000140

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4906      	ldr	r1, [pc, #24]	; (800103c <__NVIC_EnableIRQ+0x34>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff90 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff2d 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff42 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff35 	bl	8001008 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e148      	b.n	8001466 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d4:	2201      	movs	r2, #1
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8137 	bne.w	8001460 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4aa3      	ldr	r2, [pc, #652]	; (8001484 <HAL_GPIO_Init+0x2c4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d05e      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 80011fc:	4aa1      	ldr	r2, [pc, #644]	; (8001484 <HAL_GPIO_Init+0x2c4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d875      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001202:	4aa1      	ldr	r2, [pc, #644]	; (8001488 <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d058      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001208:	4a9f      	ldr	r2, [pc, #636]	; (8001488 <HAL_GPIO_Init+0x2c8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d86f      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800120e:	4a9f      	ldr	r2, [pc, #636]	; (800148c <HAL_GPIO_Init+0x2cc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d052      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001214:	4a9d      	ldr	r2, [pc, #628]	; (800148c <HAL_GPIO_Init+0x2cc>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d869      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800121a:	4a9d      	ldr	r2, [pc, #628]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d04c      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001220:	4a9b      	ldr	r2, [pc, #620]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d863      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001226:	4a9b      	ldr	r2, [pc, #620]	; (8001494 <HAL_GPIO_Init+0x2d4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d046      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 800122c:	4a99      	ldr	r2, [pc, #612]	; (8001494 <HAL_GPIO_Init+0x2d4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d85d      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d82a      	bhi.n	800128c <HAL_GPIO_Init+0xcc>
 8001236:	2b12      	cmp	r3, #18
 8001238:	d859      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <HAL_GPIO_Init+0x80>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012bb 	.word	0x080012bb
 8001244:	08001295 	.word	0x08001295
 8001248:	080012a7 	.word	0x080012a7
 800124c:	080012e9 	.word	0x080012e9
 8001250:	080012ef 	.word	0x080012ef
 8001254:	080012ef 	.word	0x080012ef
 8001258:	080012ef 	.word	0x080012ef
 800125c:	080012ef 	.word	0x080012ef
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012ef 	.word	0x080012ef
 8001268:	080012ef 	.word	0x080012ef
 800126c:	080012ef 	.word	0x080012ef
 8001270:	080012ef 	.word	0x080012ef
 8001274:	080012ef 	.word	0x080012ef
 8001278:	080012ef 	.word	0x080012ef
 800127c:	080012ef 	.word	0x080012ef
 8001280:	080012ef 	.word	0x080012ef
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b1 	.word	0x080012b1
 800128c:	4a82      	ldr	r2, [pc, #520]	; (8001498 <HAL_GPIO_Init+0x2d8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e02c      	b.n	80012ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e029      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e024      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	3308      	adds	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e01f      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	330c      	adds	r3, #12
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e01a      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e013      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	611a      	str	r2, [r3, #16]
          break;
 80012da:	e009      	b.n	80012f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	615a      	str	r2, [r3, #20]
          break;
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          break;
 80012ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d801      	bhi.n	80012fa <HAL_GPIO_Init+0x13a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_Init+0x13e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	; 0xff
 8001304:	d802      	bhi.n	800130c <HAL_GPIO_Init+0x14c>
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x152>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b08      	subs	r3, #8
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8090 	beq.w	8001460 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <HAL_GPIO_Init+0x2dc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <HAL_GPIO_Init+0x2dc>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_GPIO_Init+0x2dc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001358:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <HAL_GPIO_Init+0x2e0>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x2e4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1e0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1dc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x2ec>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1d8>
 8001394:	2302      	movs	r3, #2
 8001396:	e004      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 8001398:	2303      	movs	r3, #3
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b2:	493b      	ldr	r1, [pc, #236]	; (80014a0 <HAL_GPIO_Init+0x2e0>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	4937      	ldr	r1, [pc, #220]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4933      	ldr	r1, [pc, #204]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	492d      	ldr	r1, [pc, #180]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	4929      	ldr	r1, [pc, #164]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4923      	ldr	r1, [pc, #140]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	491f      	ldr	r1, [pc, #124]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001434:	4013      	ands	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4919      	ldr	r1, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	4915      	ldr	r1, [pc, #84]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800145c:	4013      	ands	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3301      	adds	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f aeaf 	bne.w	80011d4 <HAL_GPIO_Init+0x14>
  }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	372c      	adds	r7, #44	; 0x2c
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	10320000 	.word	0x10320000
 8001488:	10310000 	.word	0x10310000
 800148c:	10220000 	.word	0x10220000
 8001490:	10210000 	.word	0x10210000
 8001494:	10120000 	.word	0x10120000
 8001498:	10110000 	.word	0x10110000
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f2:	787b      	ldrb	r3, [r7, #1]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014fe:	e003      	b.n	8001508 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43d9      	mvns	r1, r3
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	400b      	ands	r3, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e26c      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8087 	beq.w	8001672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001564:	4b92      	ldr	r3, [pc, #584]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b04      	cmp	r3, #4
 800156e:	d00c      	beq.n	800158a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001570:	4b8f      	ldr	r3, [pc, #572]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d112      	bne.n	80015a2 <HAL_RCC_OscConfig+0x5e>
 800157c:	4b8c      	ldr	r3, [pc, #560]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d10b      	bne.n	80015a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158a:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d06c      	beq.n	8001670 <HAL_RCC_OscConfig+0x12c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d168      	bne.n	8001670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e246      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x76>
 80015ac:	4b80      	ldr	r3, [pc, #512]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a7f      	ldr	r2, [pc, #508]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e02e      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x98>
 80015c2:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7a      	ldr	r2, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a77      	ldr	r2, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0xbc>
 80015e6:	4b72      	ldr	r3, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a71      	ldr	r2, [pc, #452]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b6f      	ldr	r3, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xd4>
 8001600:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6a      	ldr	r2, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a67      	ldr	r2, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fcb6 	bl	8000f90 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fcb2 	bl	8000f90 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1fa      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xe4>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fca2 	bl	8000f90 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc9e 	bl	8000f90 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1e6      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x10c>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167e:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x18c>
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x176>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1ba      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4939      	ldr	r1, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fc57 	bl	8000f90 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc53 	bl	8000f90 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e19b      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4927      	ldr	r1, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fc36 	bl	8000f90 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fc32 	bl	8000f90 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e17a      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d03a      	beq.n	80017c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d019      	beq.n	800178e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff fc16 	bl	8000f90 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fc12 	bl	8000f90 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e15a      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f000 fa9a 	bl	8001cc0 <RCC_Delay>
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fbfc 	bl	8000f90 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179a:	e00f      	b.n	80017bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fbf8 	bl	8000f90 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d908      	bls.n	80017bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e140      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	42420000 	.word	0x42420000
 80017b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e9      	bne.n	800179c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80a6 	beq.w	8001922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b97      	ldr	r3, [pc, #604]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10d      	bne.n	8001802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a93      	ldr	r2, [pc, #588]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_RCC_OscConfig+0x4f8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180e:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a8a      	ldr	r2, [pc, #552]	; (8001a3c <HAL_RCC_OscConfig+0x4f8>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7ff fbb9 	bl	8000f90 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff fbb5 	bl	8000f90 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	; 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0fd      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x4f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x312>
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a7a      	ldr	r2, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	e02d      	b.n	80018b2 <HAL_RCC_OscConfig+0x36e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x334>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	e01c      	b.n	80018b2 <HAL_RCC_OscConfig+0x36e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x356>
 8001880:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x36e>
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb69 	bl	8000f90 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb65 	bl	8000f90 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0ab      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ee      	beq.n	80018c2 <HAL_RCC_OscConfig+0x37e>
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb53 	bl	8000f90 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb4f 	bl	8000f90 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e095      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ee      	bne.n	80018ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8081 	beq.w	8001a2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d061      	beq.n	80019fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d146      	bne.n	80019ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCC_OscConfig+0x4fc>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fb23 	bl	8000f90 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fb1f 	bl	8000f90 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e067      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d108      	bne.n	8001988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	492d      	ldr	r1, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a19      	ldr	r1, [r3, #32]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	430b      	orrs	r3, r1
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x4fc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff faf3 	bl	8000f90 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff faef 	bl	8000f90 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e037      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x46a>
 80019cc:	e02f      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_RCC_OscConfig+0x4fc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fadc 	bl	8000f90 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff fad8 	bl	8000f90 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e020      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x498>
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	42420060 	.word	0x42420060

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fa2c 	bl	8000f90 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff fa28 	bl	8000f90 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f98a 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	0800253c 	.word	0x0800253c
 8001c10:	20000054 	.word	0x20000054
 8001c14:	20000058 	.word	0x20000058

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x36>
 8001c46:	e027      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4a:	613b      	str	r3, [r7, #16]
      break;
 8001c4c:	e027      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0c5b      	lsrs	r3, r3, #17
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	fb02 f203 	mul.w	r2, r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	613b      	str	r3, [r7, #16]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	0800254c 	.word	0x0800254c
 8001cb8:	0800255c 	.word	0x0800255c
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <RCC_Delay+0x34>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <RCC_Delay+0x38>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0a5b      	lsrs	r3, r3, #9
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cdc:	bf00      	nop
  }
  while (Delay --);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	60fa      	str	r2, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f9      	bne.n	8001cdc <RCC_Delay+0x1c>
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000054 	.word	0x20000054
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e041      	b.n	8001d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff f85a 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f000 fa6e 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e035      	b.n	8001e20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_TIM_Base_Start_IT+0x90>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_TIM_Base_Start_IT+0x4e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d004      	beq.n	8001dea <HAL_TIM_Base_Start_IT+0x4e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIM_Base_Start_IT+0x94>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d010      	beq.n	8001e1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	e007      	b.n	8001e1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40000400 	.word	0x40000400

08001e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0202 	mvn.w	r2, #2
 8001e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9b4 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f9a7 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f9b6 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0204 	mvn.w	r2, #4
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f98a 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f97d 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f98c 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0208 	mvn.w	r2, #8
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f960 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f953 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f962 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0210 	mvn.w	r2, #16
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2208      	movs	r2, #8
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f936 	bl	80021e4 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f929 	bl	80021d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f938 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0201 	mvn.w	r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fe78 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa6b 	bl	80024ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8fc 	bl	8002208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b20      	cmp	r3, #32
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b20      	cmp	r3, #32
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0220 	mvn.w	r2, #32
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa36 	bl	80024a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_TIM_ConfigClockSource+0x1c>
 800205c:	2302      	movs	r3, #2
 800205e:	e0b4      	b.n	80021ca <HAL_TIM_ConfigClockSource+0x186>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800207e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002098:	d03e      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0xd4>
 800209a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209e:	f200 8087 	bhi.w	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a6:	f000 8086 	beq.w	80021b6 <HAL_TIM_ConfigClockSource+0x172>
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ae:	d87f      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b70      	cmp	r3, #112	; 0x70
 80020b2:	d01a      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xa6>
 80020b4:	2b70      	cmp	r3, #112	; 0x70
 80020b6:	d87b      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020b8:	2b60      	cmp	r3, #96	; 0x60
 80020ba:	d050      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x11a>
 80020bc:	2b60      	cmp	r3, #96	; 0x60
 80020be:	d877      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020c0:	2b50      	cmp	r3, #80	; 0x50
 80020c2:	d03c      	beq.n	800213e <HAL_TIM_ConfigClockSource+0xfa>
 80020c4:	2b50      	cmp	r3, #80	; 0x50
 80020c6:	d873      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d058      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x13a>
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d86f      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020d0:	2b30      	cmp	r3, #48	; 0x30
 80020d2:	d064      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x15a>
 80020d4:	2b30      	cmp	r3, #48	; 0x30
 80020d6:	d86b      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d060      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x15a>
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d867      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d05c      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x15a>
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d05a      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x15a>
 80020e8:	e062      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f000 f95e 	bl	80023ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800210c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	609a      	str	r2, [r3, #8]
      break;
 8002116:	e04f      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f000 f947 	bl	80023ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213a:	609a      	str	r2, [r3, #8]
      break;
 800213c:	e03c      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f000 f8be 	bl	80022cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2150      	movs	r1, #80	; 0x50
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f915 	bl	8002386 <TIM_ITRx_SetConfig>
      break;
 800215c:	e02c      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f000 f8dc 	bl	8002328 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2160      	movs	r1, #96	; 0x60
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f905 	bl	8002386 <TIM_ITRx_SetConfig>
      break;
 800217c:	e01c      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	f000 f89e 	bl	80022cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f8f5 	bl	8002386 <TIM_ITRx_SetConfig>
      break;
 800219c:	e00c      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f000 f8ec 	bl	8002386 <TIM_ITRx_SetConfig>
      break;
 80021ae:	e003      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      break;
 80021b4:	e000      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <TIM_Base_SetConfig+0xa8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0x28>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x28>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <TIM_Base_SetConfig+0xac>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <TIM_Base_SetConfig+0xa8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <TIM_Base_SetConfig+0x52>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d003      	beq.n	800226e <TIM_Base_SetConfig+0x52>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <TIM_Base_SetConfig+0xac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d108      	bne.n	8002280 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <TIM_Base_SetConfig+0xa8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d103      	bne.n	80022b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400

080022cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f023 0201 	bic.w	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f023 030a 	bic.w	r3, r3, #10
 8002308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0210 	bic.w	r2, r3, #16
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	031b      	lsls	r3, r3, #12
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002364:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f043 0307 	orr.w	r3, r3, #7
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b087      	sub	sp, #28
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	431a      	orrs	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	609a      	str	r2, [r3, #8]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800240c:	2302      	movs	r3, #2
 800240e:	e041      	b.n	8002494 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d004      	beq.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d10c      	bne.n	8002482 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800246e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400

080024a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	2600      	movs	r6, #0
 80024d0:	4d0c      	ldr	r5, [pc, #48]	; (8002504 <__libc_init_array+0x38>)
 80024d2:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	f000 f822 	bl	8002524 <_init>
 80024e0:	2600      	movs	r6, #0
 80024e2:	4d0a      	ldr	r5, [pc, #40]	; (800250c <__libc_init_array+0x40>)
 80024e4:	4c0a      	ldr	r4, [pc, #40]	; (8002510 <__libc_init_array+0x44>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	08002560 	.word	0x08002560
 8002508:	08002560 	.word	0x08002560
 800250c:	08002560 	.word	0x08002560
 8002510:	08002564 	.word	0x08002564

08002514 <memset>:
 8002514:	4603      	mov	r3, r0
 8002516:	4402      	add	r2, r0
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	f803 1b01 	strb.w	r1, [r3], #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
